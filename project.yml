# https://spacy.io/usage/training
# https://spacy.io/usage/training#config
# https://explosion.ai/blog/spacy-v3-project-config-systems#spacy-config-system
# https://stackoverflow.com/questions/72904855/no-pos-tags-in-newly-trained-spacy-ner-model-how-to-enable
# https://github.com/explosion/spaCy/discussions/6777

# Transformer example: https://github.com/explosion/projects/blob/1ba2ba72ca3a0edb2dee1b8b8f0f7b2bffe53c87/tutorials/ner_pytorch_medical/configs/spacy_config_trf.cfg
# https://github.com/explosion/projects/blob/1ba2ba72ca3a0edb2dee1b8b8f0f7b2bffe53c87/tutorials/textcat_goemotions/configs/bert.cfg

# It's using tok2vec spacy-transformers

# https://github.com/explosion/spaCy/discussions/10330
# 

title: ""
description: ""

vars:
  name: "numeric_ner"
  lang: "en"
  version: "0.0.1"
  # Set your GPU ID, -1 is CPU
  gpu_id: 0
  # Vectors model for train-with-vectors
  # vectors_model: "en_core_web_trf"
  vectors_model: "en_core_web_lg"  
  dir: 
    corpus: 'data/corpus'
    assets: 'data/assets'
    training: 'data/training'
    packages: 'data/packages'
  file:
    train: '${vars.dir.assets}/train_numeric.json'
    spacy:
      train: '${vars.dir.corpus}/train_numeric.spacy'    
      test: '${vars.dir.corpus}/test_numeric.spacy' 
      val: '${vars.dir.corpus}/val_numeric.spacy' 

directories: ['data/corpus', 'data/assets', 'data/packages', 'data/training', "configs", "scripts"]

assets:
  - dest: "${vars.file.train}"
  - dest: "${vars.dir.corpus}"
  - dest: "${vars.dir.training}"
  - dest: "${vars.dir.assets}"
  - dest: "${vars.dir.packages}"

workflows:
  all:
    - convert
    - init-config
    - train
    - evaluate

commands:
  - name: "download"
    help: "Download a spaCy model with pretrained vectors"
    script:
      - "python -m spacy download ${vars.vectors_model}"

  - name: "convert"
    help: "Convert the data to spaCy's binary format"
    script:
      - python scripts/convert.py ${vars.lang} ${vars.file.train} ${vars.dir.corpus}
    deps:
      - "${vars.file.train}"
    outputs:
      - "${vars.file.spacy.train}"
      - "${vars.file.spacy.test}"
      - "${vars.file.spacy.val}"

  - name: "init-config"
    help: "Fill config defaults"
    script:
      - "python -m spacy init fill-config configs/base_config.cfg configs/config.cfg"      
      - "python -m spacy init fill-config configs/base_trf_config.cfg configs/trf_config.cfg"

  - name: "train"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/config.cfg --output ${vars.dir.training} --paths.train ${vars.file.spacy.train} --paths.dev ${vars.file.spacy.val} --gpu-id ${vars.gpu_id} --initialize.vectors ${vars.vectors_model}"
    deps:
      - "configs/config.cfg"
      - "${vars.file.spacy.train}"
      - "${vars.file.spacy.val}"
    outputs:
      - "${vars.dir.training}/model-best"

  - name: "train-trf"
    help: "Train the NER model with vectors"
    script:
      - "python -m spacy train configs/trf_config.cfg --output ${vars.dir.training} --paths.train ${vars.file.spacy.train} --paths.dev ${vars.file.spacy.val} --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "${vars.file.spacy.train}"
      - "${vars.file.spacy.val}"
    outputs:
      - "${vars.dir.training}/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate ${vars.dir.training}/model-best ${vars.file.spacy.test} --output ${vars.dir.training}/metrics.json"
    deps:
      - "${vars.file.spacy.test}"
      - "${vars.dir.training}/model-best"
    outputs:
      - "${vars.dir.training}/metrics.json"

  - name: package
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package ${vars.dir.training}/model-best ${vars.dir.packages} --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "${vars.dir.training}/model-best"
    outputs_no_cache:
      - "${vars.dir.packages}/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: visualize-model
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"I saw Shaka Khan in London.\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"
